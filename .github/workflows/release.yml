name: Build Release

on:
  push:
    tags:
      - 'v*'
      - 'beta*'
      - 'rc*'

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            asset_name: ft_place_bot-linux
          - os: windows-latest
            asset_name: ft_place_bot.exe
          - os: macos-latest
            asset_name: ft_place_bot-macos

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        installer-parallel: true

    - name: Configure Poetry
      shell: bash
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true

    - name: Add Poetry to PATH
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          echo "$APPDATA\Python\Scripts" >> $GITHUB_PATH
        else
          echo "$RUNNER_TOOL_CACHE/poetry/bin" >> $GITHUB_PATH
        fi

    - name: Install dependencies
      shell: bash
      run: poetry install --with dev

    - name: Build binary
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          poetry run python scripts/build.py --name ${{ matrix.asset_name }}
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          poetry run python scripts/build.py --name ${{ matrix.asset_name }}
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          poetry run python scripts/build.py --name ${{ matrix.asset_name }}
        fi

    - name: Upload binary
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.asset_name }}
        path: dist/${{ matrix.asset_name }}
        if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download Linux Binary
        uses: actions/download-artifact@v3
        with:
          name: ft_place_bot-linux
          path: artifacts

      - name: Download Windows Binary
        uses: actions/download-artifact@v3
        with:
          name: ft_place_bot.exe
          path: artifacts

      - name: Download MacOS Binary
        uses: actions/download-artifact@v3
        with:
          name: ft_place_bot-macos
          path: artifacts

      - name: List files
        shell: bash
        run: |
          echo "Contents of artifacts directory:"
          ls -la artifacts/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: artifacts/*
          prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          fail_on_unmatched_files: true
